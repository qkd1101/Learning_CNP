socket : 프로그램이 네트워크에서 데이터를 송수신 할 수 있도록, 네트워크환경에 접속할수 있도록 하는 연결부, 도구

OSI 7 단계  1. physical : 통신 케이블
			2. Data Link : MAC주소.라우터
			3. NetWork : IP주소/프로토콜
			4. Transport : TCP 데이터를 메세지 형태, 신뢰성 바탕 /UDP 데이터그램으로 전송, 연속성 바탕
			5. Session : Port연결 후 유효성 평가
			6. Presentation
			7. Application

소켓 API : 운영체제에 의해 제공되는 소프트웨어적인 장치

*----------------*									*---------------*
| Clinent Socket | ------------------------------>  | Server Socket |
*----------------*								7000*---------------*
(1.1.1.1)		    connet to(2.2.2.2:7000)		accept (2.2.2.2)

요청을 받아들이는 쪽에서는 어떤 연결요청을 받아들일것인지 미리 결정(주로 포트)

Server Socket은 Client의 연결요청을 받아들이는 역할만함. 직접적인 데이터 송수신은 새로운 소켓이 담당.


Socket API Precedure
Client Socket 1)socket() :  create socket.
							int socket(int domain, int type, int protocol)
							domain : PF_INET, PF_INET6, PF_LOCAL, PF_PACKET(LOW LEVEL socket), PF_IPX(IPX Node protocol)
							프로토콜 체계를 할당하고 프로콜이란 소켓끼리 통신하기위한 규약
							type : Sock_STREAM(TCP), Sock_DGRAM(UDP)
							protocol : 0을 쓰면 시스템이 알아서 한다.

			  2)connect() : 클라이언트 소켓에 IP와 PORT(클라이언트 입장에선 알 필요가 없음. 얘는 알아서 OS에서 줌 왜냐하면 서버의 포트번호로를 찾아서 연결을 이미 마쳤기 때문에)를 할당함. 
							API : 'IP주소'와 '포트번호'로 식별되는 대상으로 연결 요청
							BLOCK으로 동작 : 요청에 대한 결과가 결정되기 전까진 connect()의 실행은 안끝남(리턴 X)
							connect(클라이언트소켓,서버의IP,Port정보,sizeof())
							connet()안에 클라이언트 소켓에 줄 IP와 PORT번호에 대한 bind()함수가 있으며 이는 OS가 알아서 줌.

			  3)send(),recv() : 블럭동작
								recv() -> 언제 send() 주체가 어떤 것을 보낼지 몰라 언제 끝날지 모름.
								       -> 별도의 스레드에서 실행
									      소켓이 생성되고 새로운 스레드에서 recv()를 실행하고 데이터가 수신되길 기다린다.

			  4)close() : 소켓제거. 다시 쓰려면 소켓을 다시 생성해야함.




Server Socket 1)socket() : create socket

		      2)bind() : 소켓과 port번호, IP를 결합함.
						 OS가 특정 포트번호를 서버소켓이 사용하도록 만들기 위해 소켓과 포트번호를 결합할때 쓴다.
						 바인딩된 소켓이라고 한다.
						 인자(serv soc.(struct sockadd*)struct sockaddr_in, sizeof소켓);
						 강제 케스팅하는 이유 : 크기가 같아서 상관은 없고, sockaddr의 데이터는 sa_data로 14바이트 문자열인데 여기에 포트와 아이피를 그냥 갖다넣기에는 많이 불편하여 편의성을
						 위해 sockaddr_in을 만들어 사용하였고, bind()의 인자가 sockaddr이므로 강제로 캐스팅해줌.

			  3)listen() : SUCCESS / FAIL
			               대기중인 연결요청은 Queue에 저장됨.
						
			  4)accept() : 클라이언트 소켓과 커넥션 되는건 accept api내부의 새로운 소켓(Connection Established Socket)

			  5)close() : socket() API + accept() API의 소켓 둘다 자원해제