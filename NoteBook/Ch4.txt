 TCP/IP 프로토콜 -> OSI 7 Layer

 TCP/UDP만 설정하고 나머지는 OS가 알아서 설정함. (ex) Link 와 같은 경우는 어느 라우터들을 통해서 목적지에 접속할지 OS가 알아서 결정함. 유선 : 802.3 무선 : 802.11

 TCP 데이터 전송 보장 ( 호스트 A 가 1, 2, 3 패킷을 호스트 B에 보낸다 하였을때 호스트 B가 1, 3번 패킷만 받았다고 하면 2번을 다시 보내라고 요청할 수 있음.)

 UDP 데이터 전송 보정하지 않음

 패킷 보내는 방법은 공책 그림 참조.

 accept() : 새로운 소켓 생성, 연결대기 큐의 소켓과 새 소켓을 연결함. (연결대기 큐의 소켓하는 방식은 자동관리 되므로 알필요없음)

 listen(int sock 대기할 서버 소켓, backlog 큐의 크기)

 연결요청도 데이터 전송(컨트롤 패킷)중 하나,

 int accept(int sock 서버 소켓,struct sockaddr* 클라이언트의 주소 정보를 담을 비어있는 소켓, 두번째 주소의 길이)	
 //길이를 주는 이유는 소켓의 주소를 알고 길이를 알면 어디까지가 주소 구조체인지 알 수 있기 때문. 새로운 소켓(데이터를 주고받을)의 file description을 return 한다.


 TCP에서 Client의 connet

 connect(클라이언트의 소켓, 서버의 주소, 길이) 반환 방법 1) backlog가 비어있어서 accept()가 소켓을 만들고 주소를 설정후 반환
    반환은 첫번째 인자(int타입) 클라이언트 소켓	     	 2) backlog에 기록만 해놓고 반환

 connect() 반환 알고리즘 : 그림참조.

 Iterative 서버

 accept() ~ close(client_sock) backlog에서 대기 소켓을 꺼내오며 반복 

 read()/write()는 Network Interface Card에 있는 버퍼에 적었다가 이걸 write()/read()버퍼로 보내는 것이다.

 서버에서의 read()/write() 대상은 accept()에서 새로 반환된(만들어진) 소켓이다. -> client와 연결되어있기 때문에 여기다 read/write함.

 에코 클라이언트의 문제 : ch5로.
