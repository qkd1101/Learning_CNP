SOL_SOCKE	|	IPPROTO_IP	|	IPPROTO_TCP		-> PROTOCOL LEVEL
SO_SNNBUF						TCP_NODELAY		-> 이 이하 option level
SO_RCVBUF
SO_REUSEADDR
SO_TYPE

int getsockopt(int osck, int level, int optname, void * optval, socklen_t * optlen);

int level : protocol level
int optname : 소켓의 옶션값 주소/ 확인결과 저장 기억공간  (int/ char등 보이드로 캐스팅 함)
socklen_t * optlen : 부를때 나올때 다 의미가 있기에/ dlfrdjdigkf zmrl


int setsockopt(int sock, int level, int optname, const void * optval,socklen_t optlen);

											recv_buf엔 1024를 넣음.
예제) setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (void*)&recv_buf, sizeof(recv_buf));  

SO_REUSEADDR -> time_wait문제

호스트A가 clsoe()를 호출하면 호스트B로부터 FIN패킷이 올거고 A는 다시 B에게 ACK을 줘야 한다.
근데 여기서 FIN패킷이 잘 갔는지 모르므로 호스트A의 소켓에 할당된 IP와 PORT는 사용하지 못한다.
만약 호스트 B로부터 다시 FIN패킷이 온다면 호스트A는 다시 ACK를 줘야하기 때문이다.
호스트 B에 호스트 A의 ACK가 오면 바로 호스트B의 IP와 PORT를 사용할수 있지만 호스트 A는 아직 잘간걸 아직 모르기때문에 호스트 A의 IP와 PORT를 사용할수 없다.'

호스트A가 Client Socket이라면 별 문제가 없다.

SO_REUSEADDR -> time_out기간에도 해당 IP와 PORT NUMBER를 bind를 가능하게 해주는 옵션.
					-> (void *)opticl은 true(1)로 설정.

TCP_NODELAY
Nagle Algorithm

nagle알고리즘은 데이터를 보내는 소켓의 write버퍼에 "Nagle"이라는 String이 들어오고 있으면 N은 들어오자마자 바로 전송한다,
그리고 상대로부터 ACK가 올때까지 버퍼에 agle을 채우고 다 보낸다.

-> 패킷의 크기가 커짐.(대신 패킷의 수는 줄어듦.)
	네트워크의 상태가 양호해짐.

비 nagle은 상대의 ack를 기다리지 않고 n,a,g,l,e로 하나씩 보낸다.

->네트워크 속도가 빠를땐 데이터 수신이 더 빠를 수도 있다.(속도면에서 좋음)

nagle algorithm이 default이며 이를 중단하는 소켓 옵션
TCP_NODELAY

int opt_val = 1;
setsockopt(sock, IPPROTO_TCP,TCP_NODELAY, (void * )&opt_val, sizeof(opt_val));
	->즉, 옵션이 켜지면 NODELAY모드로 켜진다.
		-->꺼지면 Nagle모드로 돌아감.
